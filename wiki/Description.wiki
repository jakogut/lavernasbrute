#labels Phase-Design,Featured
#Project Description and Goals

= Introduction =

The aim of this project is to provide a free (in both senses) implementation of a brute-force password cracker. The first goal is to successfully crack a windows password of any length. After this has been completed, I can add support for GPGPU acceleration, and after that's completed, I can add support for the cracking of other passwords, such as WEP/WPA keys.

= Milestones: =

    *  Random generation of strings for use in a brute forcer    *Complete*
    *  Threading support    *Complete*

    *  Support for cracking of Windows passwords
        *  Extract LM/NTLM hashes *Complete*
        *  Re-create one-way hash function *Complete*

    *  Support for cracking of network authentication keys
        
    *  `*`NIX Support *Complete*

    *  Rainbow Tables

    *  Alternative Processing Paths:
        *  ATI (Stream) processing path *Partial*
        *  NVIDIA (CUDA) processing path
        *  Networked load distribution/coordination (Project Vesta)
        

= Current Speed: =
*All current speed tests are out of date!*

(IPS == iterations per second.)

Tests run on a Core 2 Duo 2.00 ghz (T7300)

All tests used a random string consisting of a full 62-byte character set.

    * No hash-generation, four character string, 128(+1) threads. 
        * ~~Iterations per second: N/A~~
        * ~~Estimated time: Instant~~

    * No hash-generation, five character string, 128(+1) threads. 
        * ~~Iterations per second: 3.6 million~~
        * ~~Estimated time: < 20 seconds~~

    * No hash-generation, six character string, 128(+1) threads.
        * ~~Iterations per second: 3.3 million~~
        * ~~Estimated time: < 5 hours~~

These are informal tests. Complete accuracy is not guaranteed, but the results were estimated to the best of my ability. Results were averaged when practical, estimated time was rounded up, and iterations per second was rounded down.

These results do not show the maximum potential speed of the program, as the test machine was often times actively in use while the tests were running in the background.