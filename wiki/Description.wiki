#labels Phase-Design,Featured
#Project Description and Goals

= Introduction =

The aim of this project is to provide a free (in both senses) implementation of a brute-force password cracker. The first goal is to successfully crack a windows password of any length. After this has been completed, I can add support for GPGPU acceleration, and after that's completed, I can add support for the cracking of other passwords, such as WEP/WPA keys.

= Milestones: =

    *  Random generation of strings for use in a brute forcer    *Completed*
    *  Threading support    *Completed*

    *  Support for cracking of Windows passwords
        *  Extract LM/NTLM hashes *Completed*
        *  Re-create one-way hash function *Partial*

    *  Support for cracking of network authentication keys
        
    *  `*`NIX Support *Partial*
    *  GPGPU Acceleration (ATI/Stream)

    *  GPGPU Acceleration (Nvidia/CUDA)

= Current Speed: =
(IPS == iterations per second.)

Core 2 Duo 2.00 ghz (T7300)

All tests used a random string consisting of the full alphabetical character set, lower-case and upper-case, as well as numbers.

    * No hash-generation, four character string, 32(+1) threads. 
        * Estimated time: Instant
        * ~N/A

    * No hash-generation, five character string, 32(+1) threads. 
        * Estimated time: < 3 min
        * ~2.3 million ips

    * No hash-generation, six character string, 32(+1) threads.
        * Estimated time: < 30 min
        * ~2.2 million ips

These are informal tests. Complete accuracy is not guaranteed, but the results were estimated to the best of my ability. Results were averaged when practical, estimated time was rounded up, and iterations per second was rounded down.

= Ideal Configuration: =

The ideal configuration to achieve the greatest speed using Laverna's Brute is to set the number of threads equal to the number of cores your processor(s) have, and run it with the "--silent" flag. The silent flag is used to prevent LB from printing the number of iterations to the console, which can significantly improve performance in the long run. If the string you're attempting to crack is above six characters, it it highly recommended that you set the silent flag, or at the very least, set the update interval (Flag "-i") to be a very high value.